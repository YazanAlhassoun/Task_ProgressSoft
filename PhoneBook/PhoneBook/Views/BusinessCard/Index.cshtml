@model IEnumerable<PhoneBook.Models.BusinessCard>

@{
    ViewBag.Title = "Index";
}

<br />
<br />
<br />
<br />
<br />
<br />


<div class="col-lg-12 wow fadeInUp" data-wow-duration="0.5s" data-wow-delay="0.25s">


    




    <div class="container">

        <div class="row ">
            <div class="col-md-4 ">
                <div class="row">
                    <div class="col-md-4">
                        <p>
                            @Html.ActionLink("Add New", "WayToAdd", "Home", null, new { @class = "btn btn-primary", id = "mid" })
                        </p>
                       
                    </div>
                    <div class="col-md-4">
                        @using (Html.BeginForm("ExportToXML", "BusinessCard", FormMethod.Post, new { @class = "btn btn-primary" }))
                        {
                            <input type="submit" value="Export .XML" class="far fa-file-code" />

                        }

                    </div>
                  
                    <div class="col-md-4">
                        @using (Html.BeginForm("ExportCSV", "BusinessCard", FormMethod.Post, new { @class = "btn btn-primary" }))
                        {
                            <input type="submit" value="Export .CSV" class="far fa-file-code" />
                        }
                    </div>
                </div>
            </div>


        </div>

    <hr />

        <div class="header_wrap">
            <div class="num_rows">

                <div class="row">
                    <div class="col-md-4"></div>
                    <div class="col-md-4"></div>
                </div>


                <div class="form-group">
                    <div class="row">


                    </div><h6>Show Rows</h6>
                    <select class="form-control" name="state" id="maxRows">
                        <option value="10">10</option>
                        <option value="15">15</option>
                        <option value="20">20</option>
                        <option value="50">50</option>
                        <option value="70">70</option>
                        <option value="100">100</option>
                        <option value="5000">Show ALL Rows</option>
                    </select>

                </div>
            </div>
            <div class="tb_search">
                <h6>Search..</h6>
                <input type="text" id="search_input_all" onkeyup="FilterkeyWord_all_table()" placeholder="" class="form-control">
            </div>
        </div>
        <br />
        <table class="table table-striped table-class " id="table-id">


            <thead>
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.Name)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Gender)
                    </th>
                    <th>
                        DOB
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Email)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Phone)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Photo)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Address)
                    </th>
                    <th>Delete</th>
                </tr>
            </thead>
            <tbody>

                @foreach (var item in Model)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.Name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Gender)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.DateOfBirth)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Email)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Phone)
                        </td>

                        <td>
                            <img src="data:imageData/png;base64,@Html.DisplayFor(model=>item.Photo)" alt="" style="width:100px; height:120px">
                        </td>

                        <td>
                            @Html.DisplayFor(modelItem => item.Address)
                        </td>

                        <td>
                            <div class="col-lg-2"><a href="@Url.Action("Delete","BusinessCard", new { id = item.Id })" class="btn btn-danger"><span class="far fa-trash-alt"></span></a></div>
                        </td>
                    </tr>

                }
            <tbody>
        </table>

        <!--		Start Pagination -->
        <div class='pagination-container'>
            <nav>
                <ul class="pagination">
                    <!--	Here the JS Function Will Add the Rows -->
                </ul>
            </nav>
        </div>
        <div class="rows_count">Showing 11 to 20 of 91 entries</div>

    </div> <!-- 		End of Container -->
    <!--  Developed By Yasser Mas -->





</div>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript" src="http://ajax.aspnetcdn.com/ajax/jquery.validate/1.12.0/jquery.validate.min.js"></script>
    <script type="text/javascript">

        $(document).ready(function () {
            $('form').validate({
                rules: {
                    xmlFile: {
                        required: true
                    }
                },
                messages: {
                    xmlFile: "Choose file to upload",
                }
            })

        });



        getPagination("#table-id");
        $("#maxRows").trigger("change");
        function getPagination(table) {
            $("#maxRows").on("change", function () {
                $(".pagination").html(""); // reset pagination div
                var trnum = 0; // reset tr counter
                var maxRows = parseInt($(this).val()); // get Max Rows from select option

                var totalRows = $(table + " tbody tr").length; // numbers of rows
                $(table + " tr:gt(0)").each(function () {
                    // each TR in  table and not the header
                    trnum++; // Start Counter
                    if (trnum > maxRows) {
                        // if tr number gt maxRows

                        $(this).hide(); // fade it out
                    }
                    if (trnum <= maxRows) {
                        $(this).show();
                    } // else fade in Important in case if it ..
                }); //  was fade out to fade it in
                if (totalRows > maxRows) {
                    // if tr total rows gt max rows option
                    var pagenum = Math.ceil(totalRows / maxRows); // ceil total(rows/maxrows) to get ..
                    //	numbers of pages
                    for (var i = 1; i <= pagenum;) {
                        // for each page append pagination li
                        $(".pagination")
                            .append(
                                '<li data-page="' +
                                i +
                                '">\
                                                                                      <span>' +
                                i++ +
                                '<span class="sr-only">(current)</span></span>\
                                                                                    </li>'
                            )
                            .show();
                    } // end for i
                } // end if row count > max rows
                $(".pagination li:first-child").addClass("active"); // add active class to the first li

                //SHOWING ROWS NUMBER OUT OF TOTAL DEFAULT
                showig_rows_count(maxRows, 1, totalRows);
                //SHOWING ROWS NUMBER OUT OF TOTAL DEFAULT

                $(".pagination li").on("click", function (e) {
                    // on click each page
                    e.preventDefault();
                    var pageNum = $(this).attr("data-page"); // get it's number
                    var trIndex = 0; // reset tr counter
                    $(".pagination li").removeClass("active"); // remove active class from all li
                    $(this).addClass("active"); // add active class to the clicked

                    //SHOWING ROWS NUMBER OUT OF TOTAL
                    showig_rows_count(maxRows, pageNum, totalRows);
                    //SHOWING ROWS NUMBER OUT OF TOTAL

                    $(table + " tr:gt(0)").each(function () {
                        // each tr in table not the header
                        trIndex++; // tr index counter
                        // if tr index gt maxRows*pageNum or lt maxRows*pageNum-maxRows fade if out
                        if (
                            trIndex > maxRows * pageNum ||
                            trIndex <= maxRows * pageNum - maxRows
                        ) {
                            $(this).hide();
                        } else {
                            $(this).show();
                        } //else fade in
                    }); // end of for each tr in table
                }); // end of on click pagination list
            });

        }

        // SI SETTING
        $(function () {

            default_index();
        });

        //ROWS SHOWING FUNCTION
        function showig_rows_count(maxRows, pageNum, totalRows) {
            //Default rows showing
            var end_index = maxRows * pageNum;
            var start_index = maxRows * pageNum - maxRows + parseFloat(1);
            var string =
                "Showing " +
                start_index +
                " to " +
                end_index +
                " of " +
                totalRows +
                " entries";
            $(".rows_count").html(string);
        }

        // CREATING INDEX
        function default_index() {
            $("table tr:eq(0)").prepend("<th> ID </th>");

            var id = 0;

            $("table tr:gt(0)").each(function () {
                id++;
                $(this).prepend("<td>" + id + "</td>");
            });
        }

        // All Table search script
        function FilterkeyWord_all_table() {
            // Count td if you want to search on all table instead of specific column

            var count = $(".table")
                .children("tbody")
                .children("tr:first-child")
                .children("td").length;

            // Declare variables
            var input, filter, table, tr, td, i;
            input = document.getElementById("search_input_all");
            var input_value = document.getElementById("search_input_all").value;
            filter = input.value.toLowerCase();
            if (input_value != "") {
                table = document.getElementById("table-id");
                tr = table.getElementsByTagName("tr");

                // Loop through all table rows, and hide those who don't match the search query
                for (i = 1; i < tr.length; i++) {
                    var flag = 0;

                    for (j = 0; j < count; j++) {
                        td = tr[i].getElementsByTagName("td")[j];
                        if (td) {
                            var td_text = td.innerHTML;
                            if (td.innerHTML.toLowerCase().indexOf(filter) > -1) {
                                //var td_text = td.innerHTML;
                                //td.innerHTML = 'shaban';
                                flag = 1;
                            } else {
                                //DO NOTHING
                            }
                        }
                    }
                    if (flag == 1) {
                        tr[i].style.display = "";
                    } else {
                        tr[i].style.display = "none";
                    }
                }
            } else {
                //RESET TABLE
                $("#maxRows").trigger("change");
            }
        }


    </script>
}



